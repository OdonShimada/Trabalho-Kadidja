import random
import sqlite3


# ------------------------ BANCO DE DADOS ------------------------

def criar_banco():
    conexao = sqlite3.connect('cassino.db')
    cursor = conexao.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS usuarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT UNIQUE NOT NULL,
            saldo REAL NOT NULL
        )
    ''')

    conexao.commit()
    conexao.close()


def cadastrar_usuario(nome, saldo_inicial):
    conexao = sqlite3.connect('cassino.db')
    cursor = conexao.cursor()

    try:
        cursor.execute('INSERT INTO usuarios (nome, saldo) VALUES (?, ?)', (nome, saldo_inicial))
        conexao.commit()
        print(f"Usuário {nome} cadastrado com saldo R${saldo_inicial:.2f}")
    except sqlite3.IntegrityError:
        print("Usuário já existe.")
    conexao.close()


def carregar_usuario(nome):
    conexao = sqlite3.connect('cassino.db')
    cursor = conexao.cursor()

    cursor.execute('SELECT saldo FROM usuarios WHERE nome = ?', (nome,))
    resultado = cursor.fetchone()
    conexao.close()

    if resultado:
        return resultado[0]
    else:
        return None


def atualizar_saldo(nome, novo_saldo):
    conexao = sqlite3.connect('cassino.db')
    cursor = conexao.cursor()

    cursor.execute('UPDATE usuarios SET saldo = ? WHERE nome = ?', (novo_saldo, nome))
    conexao.commit()
    conexao.close()


# ------------------------ CLASSE BASE ------------------------

class Jogo:
    def __init__(self, usuario):
        self._nome = usuario
        self._saldo = carregar_usuario(usuario)

    def depositar(self, valor):
        if valor > 0:
            self._saldo += valor
            atualizar_saldo(self._nome, self._saldo)
        else:
            print("Valor de depósito inválido.")

    def sacar(self, valor):
        if 0 < valor <= self._saldo:
            self._saldo -= valor
            atualizar_saldo(self._nome, self._saldo)
            return valor
        else:
            return 0

    def verificar_saldo(self):
        print(f"Saldo atual: R${self._saldo:.2f}")
        return self._saldo


# ------------------------ JOGO 21 ------------------------

class VinteUm(Jogo):
    def menu(self):
        while True:
            if self._saldo <= 0:
                print(" Seu saldo está zerado!")
                self.fazer_deposito()

            aposta = input("Digite o valor da aposta (ou 'M' para Menu): ").upper()
            if aposta == 'M':
                return
            try:
                aposta = float(aposta)
                if aposta <= 0:
                    print("Aposta inválida.")
                    continue

                if aposta > self._saldo:
                    print("Saldo insuficiente.")
                    self.fazer_deposito()
                    continue

                self.jogar(aposta)
            except ValueError:
                print("Valor inválido.")

            opcao = input("\n Jogar novamente (S) ou Voltar ao menu (N)? ").upper()
            if opcao == 'N':
                break

    def fazer_deposito(self):
        while True:
            valor = input("Digite o valor para depósito (ou 'M' para Menu): ").upper()
            if valor == 'M':
                return
            try:
                valor = float(valor)
                if valor > 0:
                    self.depositar(valor)
                    print("Depósito realizado.")
                    break
                else:
                    print("Valor inválido.")
            except ValueError:
                print("Valor inválido.")

    def jogar(self, aposta):
        self.sacar(aposta)

        print("\nBem-vindo ao Vinte e Um!")
        jogador = [random.randint(1, 11) for _ in range(2)]
        dealer = [random.randint(1, 11) for _ in range(2)]

        while True:
            print(f"\nSuas cartas: {jogador} | Total: {sum(jogador)}")
            print(f"Carta visível do dealer: {dealer[0]}")

            if sum(jogador) == 21:
                ganho = aposta * 2.5
                print("Você fez 21! Vitória garantida!")
                self.depositar(ganho)
                print(f"Você ganhou R${ganho - aposta:.2f}")
                return
            elif sum(jogador) > 21:
                print(f"Você estourou! Perdeu R${aposta:.2f}.")
                return

            escolha = input("Deseja (C)ontinuar, (P)arar ou (M)enu? ").upper()
            if escolha == 'C':
                jogador.append(random.randint(1, 11))
            elif escolha == 'P':
                break
            elif escolha == 'M':
                return

        print(f"\nCartas do dealer: {dealer} | Total: {sum(dealer)}")
        while sum(dealer) < 17:
            dealer.append(random.randint(1, 11))
            print(f"Dealer compra. Novas cartas: {dealer} | Total: {sum(dealer)}")

        total_jogador = sum(jogador)
        total_dealer = sum(dealer)

        if total_dealer > 21 or total_jogador > total_dealer:
            ganho = aposta * 2
            print(f"Você venceu! Ganhou R${ganho - aposta:.2f}")
            self.depositar(ganho)
        elif total_jogador == total_dealer:
            print(f"Empate! Você recupera sua aposta de R${aposta:.2f}.")
            self.depositar(aposta)
        else:
            print(f"Dealer venceu. Você perdeu R${aposta:.2f}.")


# ------------------------ JOGO DADOS ------------------------

class Dados(Jogo):
    def menu(self):
        while True:
            if self._saldo <= 0:
                print("Seu saldo está zerado!")
                self.fazer_deposito()

            numero_apostado = input("Aposte em um número entre 2 e 12 (ou 'M' para Menu): ").upper()
            if numero_apostado == 'M':
                return
            aposta = input("Digite o valor da aposta (ou 'M' para Menu): ").upper()
            if aposta == 'M':
                return
            try:
                numero_apostado = int(numero_apostado)
                aposta = float(aposta)

                if aposta <= 0 or aposta > self._saldo:
                    print("Aposta inválida ou saldo insuficiente.")
                    self.fazer_deposito()
                    continue

                if not 2 <= numero_apostado <= 12:
                    print("Número fora do intervalo.")
                    continue

                self.jogar(numero_apostado, aposta)
            except ValueError:
                print("Valores inválidos.")

            opcao = input("\nJogar novamente (S) ou Voltar ao menu (N)? ").upper()
            if opcao == 'N':
                break

    def fazer_deposito(self):
        while True:
            valor = input("Digite o valor para depósito (ou 'M' para Menu): ").upper()
            if valor == 'M':
                return
            try:
                valor = float(valor)
                if valor > 0:
                    self.depositar(valor)
                    print("Depósito realizado.")
                    break
                else:
                    print("Valor inválido.")
            except ValueError:
                print("Valor inválido.")

    def jogar(self, numero_apostado, aposta):
        self.sacar(aposta)

        print("\nJogo dos Dados")
        d1 = random.randint(1, 6)
        d2 = random.randint(1, 6)
        soma = d1 + d2

        print(f"Dados: {d1} + {d2} = {soma}")

        if soma == numero_apostado:
            premio = aposta * 6
            print(f"Parabéns! Você ganhou R${premio - aposta:.2f}")
            self.depositar(premio)
        else:
            print(f"Você perdeu R${aposta:.2f}.")

        self.verificar_saldo()


# ------------------------ JOGO PAR OU ÍMPAR ------------------------

class ParOuImpar(Jogo):
    def menu(self):
        while True:
            if self._saldo <= 0:
                print("Seu saldo está zerado!")
                self.fazer_deposito()

            escolha = input("Escolha 'par' ou 'ímpar' (ou 'M' para Menu): ").strip().lower()
            if escolha == 'm':
                return
            if escolha not in ['par', 'ímpar']:
                print("Escolha inválida.")
                continue

            aposta = input("Digite o valor da aposta (ou 'M' para Menu): ").upper()
            if aposta == 'M':
                return

            try:
                aposta = float(aposta)
                if aposta <= 0 or aposta > self._saldo:
                    print("Aposta inválida ou saldo insuficiente.")
                    self.fazer_deposito()
                    continue

                self.jogar(escolha, aposta)
            except ValueError:
                print("Valor inválido.")

            opcao = input("\nJogar novamente (S) ou Voltar ao menu (N)? ").upper()
            if opcao == 'N':
                break

    def fazer_deposito(self):
        while True:
            valor = input("Digite o valor para depósito (ou 'M' para Menu): ").upper()
            if valor == 'M':
                return
            try:
                valor = float(valor)
                if valor > 0:
                    self.depositar(valor)
                    print("Depósito realizado.")
                    break
                else:
                    print("Valor inválido.")
            except ValueError:
                print("Valor inválido.")

    def jogar(self, escolha, aposta):
        self.sacar(aposta)

        print("\nJogo Par ou Ímpar")
        num1 = random.randint(1, 10)
        num2 = random.randint(1, 10)
        soma = num1 + num2
        resultado = 'par' if soma % 2 == 0 else 'ímpar'

        print(f"Números: {num1} + {num2} = {soma} ({resultado})")

        if escolha == resultado:
            ganho = aposta * 2
            print(f"Você ganhou R${ganho - aposta:.2f}")
            self.depositar(ganho)
        else:
            print(f"Você perdeu R${aposta:.2f}.")

        self.verificar_saldo()


# ------------------------ JOGO ROLETA ------------------------

class Roleta(Jogo):
    def menu(self):
        while True:
            if self._saldo <= 0:
                print("Seu saldo está zerado!")
                self.fazer_deposito()

            numero = input("Escolha um número entre 0 e 36 (ou 'M' para Menu): ").upper()
            if numero == 'M':
                return
            valor = input("Valor da aposta (ou 'M' para Menu): ").upper()
            if valor == 'M':
                return

            try:
                numero = int(numero)
                valor = float(valor)

                if valor <= 0 or valor > self._saldo:
                    print("Aposta inválida ou saldo insuficiente.")
                    self.fazer_deposito()
                    continue

                self.apostar(numero, valor)
            except ValueError:
                print("Valor inválido.")

            opcao = input("\nJogar novamente (S) ou Voltar ao menu (N)? ").upper()
            if opcao == 'N':
                break

    def fazer_deposito(self):
        while True:
            valor = input("Digite o valor para depósito (ou 'M' para Menu): ").upper()
            if valor == 'M':
                return
            try:
                valor = float(valor)
                if valor > 0:
                    self.depositar(valor)
                    print("Depósito realizado.")
                    break
                else:
                    print("Valor inválido.")
            except ValueError:
                print("Valor inválido.")

    def apostar(self, numero, valor):
        if numero < 0 or numero > 36:
            print("Número inválido.")
            return

        self.sacar(valor)

        print(f"Apostando R${valor:.2f} no número {numero}... Girando a roleta!")
        resultado = random.randint(0, 36)
        print(f"Número sorteado: {resultado}")

        if resultado == numero:
            ganho = valor * 35
            print(f"Parabéns! Você ganhou R${ganho - valor:.2f}")
            self.depositar(ganho)
        else:
            print(f"Você perdeu R${valor:.2f}.")

        self.verificar_saldo()


# ------------------------ MENU PRINCIPAL ------------------------

def main():
    criar_banco()
    print("=== Cassino Virtual ===")

    while True:
        nome = input("\nDigite seu nome de usuário: ").strip()
        saldo = carregar_usuario(nome)

        if saldo is None:
            saldo_inicial = float(input("Bem-vindo! Informe seu saldo inicial: R$ "))
            cadastrar_usuario(nome, saldo_inicial)

        jogos = {
            1: VinteUm(nome),
            2: Dados(nome),
            3: Roleta(nome),
            4: ParOuImpar(nome)
        }

        while True:
            print("\n --- MENU DE JOGOS ---")
            print("1 - Jogar 21 (Vinte e Um)")
            print("2 - Jogar Dados")
            print("3 - Jogar Roleta")
            print("4 - Jogar Par ou Ímpar")
            print("5 - Verificar saldo")
            print("6 - Depositar")
            print("7 - Trocar de usuário")

            escolha = input("Escolha uma opção: ")

            if escolha == '1':
                jogos[1].menu()
            elif escolha == '2':
                jogos[2].menu()
            elif escolha == '3':
                jogos[3].menu()
            elif escolha == '4':
                jogos[4].menu()
            elif escolha == '5':
                jogos[1].verificar_saldo()
            elif escolha == '6':
                realizar_deposito(jogos)
            elif escolha == '7':
                print("Trocando de usuário...\n")
                break
            else:
                print("Opção inválida.")


def realizar_deposito(jogos):
    valor = input("Valor para depósito (ou 'M' para Menu): ").upper()
    if valor == 'M':
        return
    try:
        valor = float(valor)
        if valor > 0:
            for jogo in jogos.values():
                jogo.depositar(valor)
            # Sincronizar saldo em todas as instâncias após depósito
            for jogo in jogos.values():
                jogo._saldo = carregar_usuario(jogo._nome)
            print(" Depósito realizado com sucesso!")
        else:
            print("Valor inválido.")
    except ValueError:
        print("Valor inválido.")


if __name__ == '__main__':
    main()

import random

"""

O **Menu Principal** foi criado para organizar a navega√ß√£o entre os diferentes jogos e fun√ß√µes do cassino.

Aqui centralizamos tudo que o jogador pode fazer no sistema:
- Escolher entre os jogos dispon√≠veis (21, Dados e Roleta)
- Verificar o saldo atual
- Fazer dep√≥sitos
- Encerrar o jogo (sair)

A ideia √© oferecer uma interface simples, intuitiva e interativa,
permitindo que o jogador tenha controle total sobre sua experi√™ncia no cassino.
Al√©m disso, em qualquer momento dentro dos jogos ou menus, existe a op√ß√£o de voltar para o menu principal,
garantindo que o jogador n√£o fique preso em nenhuma etapa.

Isso permite uma navega√ß√£o clara, segura e eficiente,
mantendo a organiza√ß√£o do c√≥digo e facilitando futuras atualiza√ß√µes ou inclus√£o de novos jogos.

"""

def main():
    saldo_inicial = float(input("Informe o saldo inicial: R$ "))
    jogos = {
        1: VinteUm(saldo_inicial),
        2: Dados(saldo_inicial),
        3: Roleta(saldo_inicial),
        4: ParOuImpar(saldo_inicial)  # Jogo adicionado aqui
    }

    while True:
        print("\n --- MENU DE JOGOS ---")
        print("1 - Jogar 21 (Vinte e Um)")
        print("2 - Jogar Dados")
        print("3 - Jogar Roleta")
        print("4 - Jogar Par ou √çmpar")  # Op√ß√£o adicionada
        print("5 - Verificar saldo")
        print("6 - Depositar")
        print("7 - Sair")

        escolha = input("Escolha uma op√ß√£o: ")

        if escolha == '1':
            jogos[1].menu()
        elif escolha == '2':
            jogos[2].menu()
        elif escolha == '3':
            jogos[3].menu()
        elif escolha == '4':
            jogos[4].menu()  # Chama o menu de Par ou √çmpar
        elif escolha == '5':
            jogos[1].verificar_saldo()
        elif escolha == '6':
            realizar_deposito(jogos)
        elif escolha == '7':
            print(" Saindo... Obrigado por jogar!")
            break
        else:
            print("Op√ß√£o inv√°lida.")


def realizar_deposito(jogos):
    valor = input("Valor para dep√≥sito (ou 'M' para Menu): ").upper()
    if valor == 'M':
        return
    try:
        valor = float(valor)
        if valor > 0:
            for jogo in jogos.values():
                jogo.depositar(valor)
            print(" Dep√≥sito realizado com sucesso!")
        else:
            print("Valor inv√°lido.")
    except ValueError:
        print("Valor inv√°lido.")


"""

Classe base 'Jogo' criada para representar a estrutura comum de qualquer jogo de apostas.

Aqui centralizamos tudo relacionado ao controle de saldo do jogador:
- Depositar dinheiro
- Sacar dinheiro (caso tenha saldo suficiente)
- Ver o saldo atual

A ideia √© que todos os outros jogos herdem dessa classe pra n√£o ter c√≥digo repetido
e pra manter um padr√£o. Com isso, d√° pra focar s√≥ na l√≥gica do jogo nas outras classes.

"""

class Jogo:
    def __init__(self, saldo_inicial=0):
        self._saldo = saldo_inicial

    def depositar(self, valor):
        if valor > 0:
            self._saldo += valor
        else:
            print("Valor de dep√≥sito inv√°lido.")

    def sacar(self, valor):
        if 0 < valor <= self._saldo:
            self._saldo -= valor
            return valor
        else:
            return 0

    def verificar_saldo(self):
        print(f"Saldo atual: R${self._saldo:.2f}")
        return self._saldo

"""

Vers√£o simplificada do famoso jogo 21.

O jogador e a casa recebem valores aleat√≥rios. Ganha quem chegar mais perto de 21 sem passar.
- Se o jogador passar de 21, perde automaticamente.
- Se a casa passar e o jogador n√£o, o jogador ganha.
- Se os dois ficarem abaixo de 21, vence quem tiver o maior valor.

Tamb√©m herda de 'Jogo' pra fazer toda a parte de saldo.
A ideia foi fazer uma l√≥gica simples, sem cartas, s√≥ com n√∫meros.

"""

class VinteUm(Jogo):
    def __init__(self, saldo_inicial=0):
        super().__init__(saldo_inicial)

    def menu(self):
        while True:
            if self._saldo <= 0:
                print(" Seu saldo est√° zerado!")
                self.fazer_deposito()

            aposta = input("Digite o valor da aposta (ou 'M' para Menu): ").upper()
            if aposta == 'M':
                return
            try:
                aposta = float(aposta)
                if aposta <= 0:
                    print("Aposta inv√°lida.")
                    continue

                if aposta > self._saldo:
                    print("Saldo insuficiente para essa aposta.")
                    self.fazer_deposito()
                    continue

                self.jogar(aposta)
            except ValueError:
                print("Valor inv√°lido.")

            opcao = input("\n Jogar novamente (S) ou Voltar ao menu (N)? ").upper()
            if opcao == 'N':
                break
            elif opcao != 'S':
                print("Op√ß√£o inv√°lida. Retornando ao menu.")
                break

    def fazer_deposito(self):
        while True:
            valor = input("Digite o valor para dep√≥sito (ou 'M' para Menu): ").upper()
            if valor == 'M':
                return
            try:
                valor = float(valor)
                if valor > 0:
                    self.depositar(valor)
                    print(" Dep√≥sito realizado.")
                    break
                else:
                    print("Valor inv√°lido.")
            except ValueError:
                print("Valor inv√°lido.")

    def jogar(self, aposta):
        self.sacar(aposta)

        print("\n Bem-vindo ao Vinte e Um!")
        jogador = []
        dealer = []

        for _ in range(2):
            jogador.append(random.randint(1, 11))
            dealer.append(random.randint(1, 11))

        while True:
            print(f"\nSuas cartas: {jogador} | Total: {sum(jogador)}")
            print(f"Carta vis√≠vel do dealer: {dealer[0]}")

            if sum(jogador) == 21:
                print("Voc√™ fez 21! Vit√≥ria garantida!")
                self.depositar(aposta * 2.5)
                return
            elif sum(jogador) > 21:
                print("Voc√™ estourou! Perdeu.")
                return

            escolha = input("Deseja (C)ontinuar, (P)arar ou (M)enu? ").upper()
            if escolha == 'C':
                jogador.append(random.randint(1, 11))
            elif escolha == 'P':
                break
            elif escolha == 'M':
                return
            else:
                print("Escolha inv√°lida.")

        print(f"\nCartas do dealer: {dealer} | Total: {sum(dealer)}")
        while sum(dealer) < 17:
            dealer.append(random.randint(1, 11))
            print(f"Dealer compra uma carta. Novas cartas: {dealer} | Total: {sum(dealer)}")

        total_jogador = sum(jogador)
        total_dealer = sum(dealer)

        if total_dealer > 21 or total_jogador > total_dealer:
            print("Voc√™ venceu!")
            self.depositar(aposta * 2)
        elif total_jogador == total_dealer:
            print("Empate! Voc√™ recupera sua aposta.")
            self.depositar(aposta)
        else:
            print("Dealer venceu. Voc√™ perdeu.")


"""

Simula um jogo de aposta com dados.

O jogador escolhe um n√∫mero entre 2 e 12 (soma de dois dados) e faz a aposta.
Dois dados s√£o lan√ßados (n√∫meros aleat√≥rios entre 1 e 6) e a soma define o resultado.
Se o jogador acertar o n√∫mero, ganha 6x o valor apostado (simula uma chance baixa com recompensa alta).

A l√≥gica √© direta e usamos a classe Jogo pra controlar saldo.
Foi pensado pra testar sorte com uma chance mais dif√≠cil.

"""

class Dados(Jogo):
    def menu(self):
        while True:
            if self._saldo <= 0:
                print("Seu saldo est√° zerado!")
                self.fazer_deposito()

            numero_apostado = input("Aposte em um n√∫mero entre 2 e 12 (ou 'M' para Menu): ").upper()
            if numero_apostado == 'M':
                return
            aposta = input("Digite o valor da aposta (ou 'M' para Menu): ").upper()
            if aposta == 'M':
                return
            try:
                numero_apostado = int(numero_apostado)
                aposta = float(aposta)

                if aposta <= 0 or aposta > self._saldo:
                    print("Aposta inv√°lida ou saldo insuficiente.")
                    self.fazer_deposito()
                    continue

                if not 2 <= numero_apostado <= 12:
                    print("N√∫mero fora do intervalo.")
                    continue

                self.jogar(numero_apostado, aposta)
            except ValueError:
                print("Valores inv√°lidos.")

            opcao = input("\nJogar novamente (S) ou Voltar ao menu (N)? ").upper()
            if opcao == 'N':
                break
            elif opcao != 'S':
                print("Op√ß√£o inv√°lida. Retornando ao menu.")
                break

    def fazer_deposito(self):
        while True:
            valor = input("Digite o valor para dep√≥sito (ou 'M' para Menu): ").upper()
            if valor == 'M':
                return
            try:
                valor = float(valor)
                if valor > 0:
                    self.depositar(valor)
                    print("Dep√≥sito realizado.")
                    break
                else:
                    print("Valor inv√°lido.")
            except ValueError:
                print("Valor inv√°lido.")

    def jogar(self, numero_apostado, aposta):
        self.sacar(aposta)

        print("\nJogo dos Dados")
        d1 = random.randint(1, 6)
        d2 = random.randint(1, 6)
        soma = d1 + d2

        print(f"üé≤ Dados: {d1} + {d2} = {soma}")

        if soma == numero_apostado:
            premio = aposta * 6
            print(f"Parab√©ns! Voc√™ ganhou R$ {premio:.2f}")
            self.depositar(premio)
        else:
            print("Voc√™ perdeu!")

        self.verificar_saldo()


"""
Jogo Par ou √çmpar.

O jogador escolhe se quer par ou √≠mpar e aposta um valor.
Dois n√∫meros s√£o sorteados, somados, e a paridade define quem venceu.

Se o jogador acertar, ganha o valor apostado. Se errar, perde.
Jogo r√°pido e com 50% de chance, simples pra testar as fun√ß√µes de aposta/saldo da classe base.

"""

class ParOuImpar(Jogo):
    def menu(self):
        while True:
            if self._saldo <= 0:
                print("Seu saldo est√° zerado!")
                self.fazer_deposito()

            escolha = input("Escolha 'par' ou '√≠mpar' (ou 'M' para Menu): ").strip().lower()
            if escolha == 'm':
                return
            if escolha not in ['par', '√≠mpar']:
                print("Escolha inv√°lida.")
                continue

            aposta = input("Digite o valor da aposta (ou 'M' para Menu): ").upper()
            if aposta == 'M':
                return

            try:
                aposta = float(aposta)
                if aposta <= 0 or aposta > self._saldo:
                    print("Aposta inv√°lida ou saldo insuficiente.")
                    self.fazer_deposito()
                    continue

                self.jogar(escolha, aposta)
            except ValueError:
                print("Valor inv√°lido.")

            opcao = input("\nJogar novamente (S) ou Voltar ao menu (N)? ").upper()
            if opcao == 'N':
                break
            elif opcao != 'S':
                print("Op√ß√£o inv√°lida. Retornando ao menu.")
                break

    def fazer_deposito(self):
        while True:
            valor = input("Digite o valor para dep√≥sito (ou 'M' para Menu): ").upper()
            if valor == 'M':
                return
            try:
                valor = float(valor)
                if valor > 0:
                    self.depositar(valor)
                    print("Dep√≥sito realizado.")
                    break
                else:
                    print("Valor inv√°lido.")
            except ValueError:
                print("Valor inv√°lido.")

    def jogar(self, escolha, aposta):
        self.sacar(aposta)

        print("\nJogo Par ou √çmpar")
        num1 = random.randint(1, 10)
        num2 = random.randint(1, 10)
        soma = num1 + num2
        resultado = 'par' if soma % 2 == 0 else '√≠mpar'

        print(f"N√∫meros: {num1} + {num2} = {soma} ({resultado})")

        if escolha == resultado:
            print("Voc√™ ganhou!")
            self.depositar(aposta * 2)
        else:
            print("Voc√™ perdeu!")

        self.verificar_saldo()


"""

Jogo da Roleta (simples).

O jogador escolhe entre vermelho ou preto, faz a aposta e a roleta "gira" (simulada com um n√∫mero aleat√≥rio).
Dependendo do n√∫mero, associamos uma cor (par = vermelho, √≠mpar = preto).
Se o jogador acertar a cor, ele ganha o dobro da aposta. Se errar, perde.

Usa a classe base Jogo pra lidar com o saldo do jogador.
A ideia √© simular a experi√™ncia de um cassino de forma bem simples.

"""

class Roleta(Jogo):
    def menu(self):
        while True:
            if self._saldo <= 0:
                print("Seu saldo est√° zerado!")
                self.fazer_deposito()

            numero = input("Escolha um n√∫mero entre 0 e 36 (ou 'M' para Menu): ").upper()
            if numero == 'M':
                return
            valor = input("Valor da aposta (ou 'M' para Menu): ").upper()
            if valor == 'M':
                return

            try:
                numero = int(numero)
                valor = float(valor)

                if valor <= 0 or valor > self._saldo:
                    print("Aposta inv√°lida ou saldo insuficiente.")
                    self.fazer_deposito()
                    continue

                self.apostar(numero, valor)
            except ValueError:
                print("Valor inv√°lido.")

            opcao = input("\nJogar novamente (S) ou Voltar ao menu (N)? ").upper()
            if opcao == 'N':
                break
            elif opcao != 'S':
                print("Op√ß√£o inv√°lida. Retornando ao menu.")
                break

    def fazer_deposito(self):
        while True:
            valor = input("Digite o valor para dep√≥sito (ou 'M' para Menu): ").upper()
            if valor == 'M':
                return
            try:
                valor = float(valor)
                if valor > 0:
                    self.depositar(valor)
                    print("Dep√≥sito realizado.")
                    break
                else:
                    print("Valor inv√°lido.")
            except ValueError:
                print("Valor inv√°lido.")

    def apostar(self, numero, valor):
        if numero < 0 or numero > 36:
            print("N√∫mero inv√°lido. Escolha entre 0 e 36.")
            return

        self.sacar(valor)

        print(f"Apostando R${valor:.2f} no n√∫mero {numero}... üé° Girando a roleta!")
        resultado = random.randint(0, 36)
        print(f"N√∫mero sorteado: {resultado}")

        if resultado == numero:
            ganho = valor * 35
            print(f"Parab√©ns! Voc√™ ganhou R${ganho:.2f}")
            self.depositar(ganho)
        else:
            print("Voc√™ perdeu a aposta.")

        self.verificar_saldo()


if __name__ == "__main__":
    main()
